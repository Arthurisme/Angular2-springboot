package com.sensoryex.backend.controller;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

 import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.sensoryex.backend.model.Comment;
import com.sensoryex.backend.model.User;
import com.sensoryex.backend.service.CommentService;

 
 
 
@RestController
@RequestMapping("/rest")
public class CommentResource {
	
	private String imageName;
	

	@Autowired
	private CommentService commentService;
	
	@RequestMapping(value="/comment/upload", method=RequestMethod.POST)
	public String upload(HttpServletResponse response, HttpServletRequest request){
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		Iterator<String> it = multipartRequest.getFileNames();
		MultipartFile multipartFile = multipartRequest.getFile(it.next());
		
		String fileName = multipartFile.getOriginalFilename();
		imageName =fileName;
		
		String path = new File("src/main/resources/static/images").getAbsolutePath()+"/"+fileName;
	    System.out.println("test path before uploaded: "+path);

		
		try{
			multipartFile.transferTo(new File(path));
		    System.out.println(path);
		}catch(IOException e){
			e.printStackTrace();
		}
		
		
		return "Upload Image Success!";
		
	}
	
	@RequestMapping(value="/comment/add", method=RequestMethod.POST)
	public Comment addComment(@RequestBody Comment comment){
		comment.setImageName(imageName);
		return	commentService.save(comment);
		}
	
	@RequestMapping(value="/comment/update", method=RequestMethod.POST)
	public Comment updateComment(@RequestBody Comment comment){
		Comment currentComment = commentService.findByCommentId(comment.getCommentId());
		currentComment.setLikes(comment.getLikes());
		return	commentService.save(currentComment);
		}
	
	
	@RequestMapping(value="/comment/user", method=RequestMethod.POST)
	public List<Comment> getCommentsByUser(@RequestBody User user){
			return	commentService.findByUser(user) ;
		}
	
	@RequestMapping(value="/comment/commentId", method = RequestMethod.POST)
	public Comment getCommentByCommentId(@RequestBody Long commentId) {
		return commentService.findByCommentId(commentId);
	}


}
